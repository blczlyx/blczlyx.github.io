<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-30T03:03:13.663Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chaos</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>217.存在重复元素</title>
    <link href="http://example.com/2023/11/30/217.%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>http://example.com/2023/11/30/217.%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</id>
    <published>2023-11-30T03:02:16.007Z</published>
    <updated>2023-11-30T03:03:13.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><p>输入：nums = [1,2,3,1]<br>输出：true</p></blockquote><blockquote><p>输入：nums = [1,2,3,4]<br>输出：false</p></blockquote><blockquote><p>输入：nums = [1,1,1,3,3,4,3,2,4,2]<br>输出：true</p></blockquote><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li>1 &lt;= nums.length &lt;= 105</li><li>-109 &lt;= nums[i] &lt;= 109</li></ul><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><a href="https://leetcode.cn/problems/contains-duplicate/">力扣（LeetCode）</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>错误代码：</strong><br><code>超出时间限制</code></p><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {        <span class="hljs-type">int</span> temp, count = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) {            temp = nums[i];            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; nums.length; j++) {                <span class="hljs-keyword">if</span> (temp == nums[j]) {                    count++;                }            }            <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">2</span>) {                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            }            count = <span class="hljs-number">0</span>;        }        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }}</code></pre><p>时间复杂度分析：O(N^2)<br>修改：</p><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {        <span class="hljs-type">int</span> temp, count = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) {            temp = nums[i];            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; nums.length; j++) {                <span class="hljs-keyword">if</span> (temp == nums[j]) {                    count++;                    <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">2</span>) {                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;                    }                }            }            count = <span class="hljs-number">0</span>;        }        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }}</code></pre><p><strong>正确代码：</strong><br>方法一：</p><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {        Arrays.sort(nums);        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) {            <span class="hljs-keyword">if</span> (nums[i] == nums[i + <span class="hljs-number">1</span>]) {                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            }        }        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }}</code></pre><p>复杂度分析：</p><ul><li>时间复杂度：O(NlogN)，其中 N 为数组的长度，需要对数组进行排序。</li><li>空间复杂度：O(logN)，其中 N 为数组的长度，注意我们在这里应当考虑递归调用栈的深度。</li></ul><p>方法二：</p><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : nums) {            <span class="hljs-keyword">if</span> (!set.add(x)) {                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            }        }        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }}</code></pre><p>复杂度分析：</p><ul><li>时间复杂度：O(N)，其中 N 为数组的长度。</li><li>空间复杂度：O(N)，其中 N 为数组的长度。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://example.com/2023/11/29/%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2023/11/29/%E6%B5%8B%E8%AF%95/</id>
    <published>2023-11-29T01:51:34.000Z</published>
    <updated>2023-11-29T01:51:34.748Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/11/19/hello-world/"/>
    <id>http://example.com/2023/11/19/hello-world/</id>
    <published>2023-11-19T06:32:34.285Z</published>
    <updated>2023-11-19T06:32:34.285Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>斯坦·李：别哭了，像英雄那样笑着说再见吧</title>
    <link href="http://example.com/2018/11/15/%E6%96%AF%E5%9D%A6%C2%B7%E6%9D%8E%EF%BC%9A%E5%88%AB%E5%93%AD%E4%BA%86%EF%BC%8C%E5%83%8F%E8%8B%B1%E9%9B%84%E9%82%A3%E6%A0%B7%E7%AC%91%E7%9D%80%E8%AF%B4%E5%86%8D%E8%A7%81%E5%90%A7/"/>
    <id>http://example.com/2018/11/15/%E6%96%AF%E5%9D%A6%C2%B7%E6%9D%8E%EF%BC%9A%E5%88%AB%E5%93%AD%E4%BA%86%EF%BC%8C%E5%83%8F%E8%8B%B1%E9%9B%84%E9%82%A3%E6%A0%B7%E7%AC%91%E7%9D%80%E8%AF%B4%E5%86%8D%E8%A7%81%E5%90%A7/</id>
    <published>2018-11-14T16:00:00.000Z</published>
    <updated>2023-12-02T12:59:36.383Z</updated>
    
    <content type="html"><![CDATA[<p>“我真正想做的，就是告诉你，我感觉很棒！”<br>——斯坦·李</p><p>11月12日，洛杉矶时间周一凌晨，有“漫威爸爸”之称的<strong>斯坦·李</strong>，又一次被急救车送进了当地的医疗中心。</p><p>不过，这个宇宙还来不及创造出钢铁侠的方舟反应炉，也没有金刚狼和死侍的自愈因子，老爷子只能接受命运的招引，与世长辞。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E8%91%AC%E7%A4%BC.jpg?raw=true" alt="葬礼"><br>95岁的老爷子，还创造了一个记录，从1989年开始，到刚刚上映的《毒液》，客串了至少40部（如果不算明年的《惊奇队长》《复仇者联盟4》）漫威影视作品，总票房应该算是演员界的地表最强了。</p><p>尽管他客串完《死侍》后，还向粉丝吐槽：<strong>“我要是能在脱衣舞厅里多待一会儿就好了，他们让我露面的时间太短了。”</strong><br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E8%84%B1%E8%A1%A3%E8%88%9E%E5%8E%85.jpg?raw=true" alt="脱衣舞厅">但是，40部的镜头加起来，已经可以组成一部特摄短片了，没准还能叫<strong>《漫威宇宙观察者日记》。</strong></p><p>漫威可以邀请每一个热爱漫画和超级英雄的人，继续欣赏老爷子不输休·海夫纳（花花公子创始人）的飒爽英姿。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E3%80%8A%E9%92%A2%E9%93%81%E4%BE%A0%E3%80%8B%E4%B8%AD%EF%BC%8C%E6%96%AF%E5%9D%A6%C2%B7%E6%9D%8E%E8%A2%AB%E5%B0%BC%E5%B0%BC%E8%AE%A4%E9%94%99%EF%BC%8C%E4%BB%A5%E4%B8%BA%E6%98%AF%E4%BC%91%C2%B7%E6%B5%B7%E5%A4%AB%E7%BA%B3.jpg?raw=true" alt="《钢铁侠》中，斯坦·李被尼尼认错，以为是休·海夫纳"><br>（《钢铁侠》中，斯坦·李被尼尼认错，以为是休·海夫纳)</p><p><strong>银幕上的老爷子，一直是漫威电影宇宙的氛围担当，</strong>似乎他一出生，就是一副白发白胡子，戴墨镜的经典形象。</p><p>然而，老爷子也年轻过，许多人不知道，如今的超级英雄宇宙，仅仅来源于半个多世纪前的一次机缘巧合。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E5%B7%A6%E8%BE%B9%E8%8D%B7%E5%85%B0%E5%BC%9F%EF%BC%8C%E5%8F%B3%E8%BE%B9%E6%96%AF%E5%9D%A6%C2%B7%E6%9D%8E.jpg?raw=true" alt="左边荷兰弟，右边斯坦·李"><br>（左边荷兰弟，右边斯坦·李）</p><p>那时候，二战还没爆发，1938年的斯坦·李也不叫斯坦·李，他还是一个叫<strong>斯坦利·马丁·利博</strong>的文艺青年，高中期间，为补贴家用，就在纽约的一家新闻办公室，为名人写讣告。</p><p>没干多久就辞掉了，因为他觉得，<strong>这份工作太丧，不符合他的人生追求。</strong></p><p>他的梦想是当一名严肃文学作家，就像他从小熟读的美国小说家<strong>马克·吐温</strong>那样。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E5%8F%AF%E8%83%BD%E6%9C%80%E5%90%8E%E5%8F%AA%E5%AD%A6%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%90%8C%E6%AC%BE%E8%83%A1%E5%AD%90%E5%90%A7.jpg?raw=true" alt="可能最后只学到了一个同款胡子吧"><br>（可能最后只学到了一个同款胡子吧)</p><p>于是，他被介绍到了堂姐夫<strong>马丁·古德曼</strong>开设的漫画公司，给公司里的漫画家打杂，做一些诸如削铅笔、灌墨水之类的活。</p><p>那年他16岁，高中毕业，公司还不叫漫威，而是叫“时代漫画公司”，<strong>发行书刊也很有时代特征，都是一些与犯罪、侦探、冒险、情色有关的通俗漫画。</strong></p><p>随后二战爆发，为了紧跟时代潮流，公司紧锣密鼓地开启了《美国队长》的漫画计划。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E7%BE%8E%E9%98%9F%EF%BC%8C%E7%BE%8E%E9%98%9F%EF%BC%8C%E8%A3%82%E5%A2%99%E6%89%8B%E6%92%95%E7%BA%B3%E7%B2%B9%EF%BC%81.jpg?raw=true" alt="美队，美队，裂墙手撕纳粹！"><br>（美队，美队，裂墙手撕纳粹！)</p><p>因为人手不够，这位想“曲线救国”拯救自己文学梦想的年轻人，也给漫画写了一篇故事，叫<strong>《美国队长挫败卖国贼的复仇》</strong>，给自己署了个笔名“斯坦·李”。</p><p>之所以不用真名，是他觉得，自己的真名得留给未来第一部严肃文学作品，在一次采访中，他说：</p><blockquote><p>“它（笔名斯坦·李）其实是随便瞎起的，因为我不想把我的真名跟那些登不得大雅之堂的傻漫画扯上关系，我要把它留给一部真正伟大的作品，一个凝缩我全部人生经历的小说。”</p></blockquote><p>可没想到，仅仅两年后，有两个人突然辞职，公司人手不够，年仅18岁的斯坦·李成了主笔、编辑、美术总监。</p><p>漫画作品越来越多，一发不可收拾，答应好自己的严肃小说也不见了踪影。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E6%88%91%E7%8C%9C%E5%8F%AA%E6%9C%89%E4%B8%80%E4%BA%BA%E6%89%8D%E8%83%BD%E5%A6%82%E6%AD%A4%E4%B8%8E%E4%BC%97%E4%B8%8D%E5%90%8C.jpg?raw=true" alt="我猜只有一人才能如此与众不同"><br>到了50年代，就像后来在中国轮番背锅的武侠小说、香港电影、电子竞技、网络游戏。漫画成了美国青少年的精神毒品。</p><p>随着心理专家威瑟姆博士在《诱惑无辜》一书中披露：<strong>“漫画是导致青少年犯罪的罪魁祸首。”</strong>甚嚣尘上的“漫画有害论”就此获得了理论支持。</p><p>惊恐的家长们坐不住了，纷纷走上街头，抵制漫画公司，焚烧漫画书。</p><p>斯坦·李所在的公司一度濒临破产，直到60年代才缓过劲儿来，<strong>在1961年，正式定名为“MARVEL漫威”。</strong><br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/MARVEL.gif?raw=true" alt="MARVEL"><br>从此，斯坦·李这个名字，伴随了漫威大半辈子，在漫画家的协助下，他创造出了神奇四侠、<strong>钢铁侠</strong>、蜘蛛侠、绿巨人、雷神托尔、X战警等超级英雄。</p><p>他也不再为自己做漫画而羞耻，也不再为自己没有写成严肃文学而愧疚，他说：</p><blockquote><p>“我逐渐意识到，娱乐是人们生活中最重要的事情之一。没有娱乐很多人会一蹶不振。所以现在我觉得，如果你能娱乐到别人，你就是在做一件好事。”</p></blockquote><p>所以，在“超级英雄”的漫画和电影里，你总能看到一些颠沛不破的定律，比如“正义战胜邪恶”，“童年阴影”，“路上奇遇”，“绝地反击”，“头发越秃越强（误）”等。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E7%90%A6%E7%8E%89%EF%BC%9A%E8%B0%81%E5%9C%A8%E5%8F%AB%E6%88%91%EF%BC%9F.jpg?raw=true" alt="琦玉：谁在叫我？"><br>（琦玉：谁在叫我？)</p><p>就连全员溃败成风沙的《复联3：灭霸传》结尾，也会留有一个惊奇队长的彩蛋，给予人们希望。</p><p>斯坦·李常常把自己比作“钢铁侠”：<strong>“因为我们都财大气粗、光彩迷人、英俊潇洒、智商了得。”</strong></p><p>当然，还有超级英雄最关键的两个词：<strong>拯救</strong>和<strong>从容</strong>。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E9%92%A2%E9%93%81%E4%BE%A0.jpg?raw=true" alt="钢铁侠"><br>如果说斯坦·李用他创造的一系列超级英雄，拯救了原本一蹶不振的漫威漫画，那么，2008年的《钢铁侠》则拯救了漫威电影宇宙。</p><p>10年前，负债5.25亿美元的漫威，向银行抵押了12个电影角色版权，才投拍了《钢铁侠》。</p><p><strong>当时，几乎每个人都认为，这个傻了吧唧的“铁人”会失败。</strong></p><p>没想最终票房大卖，震惊了好莱坞，也挽救了漫威的破产危机。</p><p>就像斯坦·李40多年前，创造钢铁侠时说的：<strong>“硬塞给读者一个人渣，管你喜不喜欢都得爱上他。”</strong> </p><p>结果，全世界都爱上了这个从漫画书里走出来，叫做“托尼·斯塔克”的人渣。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E6%89%98%E5%B0%BC%C2%B7%E6%96%AF%E5%A1%94%E5%85%8B.jpg?raw=true" alt="托尼·斯塔克"><br>很多在互联网时代抛弃了漫画书的孩子，也从银幕上，重新认识，并爱上了超级英雄。</p><p>斯坦·李在他的客串中，永远是一副嬉笑人间，从从容容的老头模样。</p><p>托尼·斯塔克也是如此，永远自信满满，胜券在握，<strong>就好像整个宇宙没有他拯救不了的危机。</strong></p><p>当他一反传统英雄的做派（隐藏身份），在媒体镜头前，宣布<strong>“我就是钢铁侠”</strong>时。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E6%88%91%E5%B0%B1%E6%98%AF%E9%92%A2%E9%93%81%E4%BE%A0.gif?raw=true" alt="我就是钢铁侠"><br>当他在小蜘蛛还没准备好，拒绝参加发布会后，掏出戒指，转身向小辣椒求婚时。</p><p><strong>相信没有人能抵挡得了这个渣男的魅力。</strong></p><p>这就是“英雄”，无论什么危机，永远都能应对自如，保持笑容。</p><p>而这个需要英雄的宇宙中，<strong>最让人心疼的，莫过于英雄的迟暮了。</strong></p><p>在《复联3》中，托尼也老了，他眼睁睁地看着小蜘蛛在怀里变成风沙消失，很多人看到这份无力，在电影院里泣不成声。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E6%89%98%E5%B0%BC%E8%80%81%E4%BA%86.jpg?raw=true" alt="托尼老了"><br>斯坦·李也老了，就在今年，《黑豹》上映后不久，他就因为出现严重的身体状况，紧急送入了医院，进行了全面检查。</p><p>尽管取消了几次媒体会面，但他接受美国广播公司的采访中，仍然很开朗地说：<strong>“我真正想做的，就是告诉你，我感觉很棒！”</strong></p><p>他不希望有人为他担心，他可是超级英雄之父啊。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E8%B6%85%E7%BA%A7%E8%8B%B1%E9%9B%84%E4%B9%8B%E7%88%B6.jpg?raw=true" alt="他可是超级英雄之父啊"><br>其实，就在去年，陪伴他近70年的妻子去世后，他的身体状况，每日愈下，甚至还被指控性侵医院护工。</p><p>而他67岁的独身女，挥霍无度，不断要求父亲把财产转移到自己名下。</p><p>与斯坦·李共事近25年的助手，也被限制了造访次数，并且不能与斯坦·李单独交谈。</p><p>熟悉的管家、园丁，甚至是会计，也遭到了更换。</p><p>为了向外界伪造出父亲对她完全信任的假象，她和一个叫摩根的男人，“不惜用上监听、威胁、虐待等各种手段。”</p><p>直到一位律师看不下去，向法院控诉摩根虐待斯坦·李，才把事情暴露在了公众眼前，说：<strong>“这位曾创造出无数超级英雄的老人，现在自己最需要一个超级英雄。”</strong></p><p>讽刺的是，斯坦·李去世后，他女儿向所有人说：“我父亲爱他所有的粉丝。他是最伟大、最正派的人。”</p><p>言下之意，也许是<strong>“父亲不爱我。”</strong><br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E7%88%B6%E4%BA%B2%E4%B8%8D%E7%88%B1%E6%88%91.jpg?raw=true" alt="父亲不爱我"><br>无论如何，斯坦·李老爷子，都在这个冬天离开了我们。</p><p>他还有许多故事没有写完，就像在《银河护卫队2》里客串的一个<strong>话痨宇航员</strong>。</p><p>坐在一块石头上，被3个“观察者”（漫威宇宙种族）抛下了。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E6%88%91%E8%BF%98%E6%9C%89%E5%BE%88%E5%A4%9A%E6%95%85%E4%BA%8B%E8%A6%81%E8%AE%B2%E5%91%A2.jpg?raw=true" alt="我还有很多故事要讲呢"><br>可就在被抛下之后，短短几个月的时间，他又跑到《雷神3》里嬉皮笑脸地给托尔剪起了头发。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E9%9B%B7%E7%A5%9E%E7%90%86%E5%8F%91.gif?raw=true" alt="雷神理发"><br>都说漫威电影宇宙是<strong>流水的英雄，铁打的斯坦·李。</strong></p><p>如今，铁打的老爷子，也该休息了。</p><p>但“超级英雄之父”和他的孩子们并没有死，老爷子留给我们，仍然是他在银幕上从容不迫的样子，听听音乐，下下棋，吐吐槽，逗逗女孩子。</p><p><strong>不像DC的英雄通常都苦大仇深，斯坦·李和他的英雄都很喜欢笑。</strong></p><p>今天看见许多纪念的文章，像十多岁的斯坦·李写讣告一样沮丧。我忽然想起了动漫《我的英雄学院》里，一个叫欧尔麦特的角色。<br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E6%AC%A7%E5%B0%94%E9%BA%A6%E7%89%B9%E7%9A%84%E5%BD%A2%E8%B1%A1%E5%80%9F%E9%89%B4%E4%BA%86%E6%BC%AB%E5%A8%81%E7%9A%84%E2%80%9C%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF%E2%80%9D.jpg?raw=true" alt="欧尔麦特的形象借鉴了漫威的“美国队长”"><br>（欧尔麦特的形象借鉴了漫威的“美国队长”）</p><p>这是一个即便流血伤重，徘徊在死亡边缘，也会用笑容鼓舞人们的英雄。</p><p>如果英雄有同义词，这个词，应该是笑容吧。</p><p>要是斯坦·李老爷子看到大家为他的死而悲伤，一定也会露出他标志性的笑，说：<strong>“别哭了，要笑啊。”</strong></p><p>我爱这样的流行文化。</p><p>而且，<strong>我始终相信，喜欢英雄故事的孩子，是不会变坏的。</strong><br><img src="https://github.com/blczlyx/Blogs-image/blob/main/img/%E6%88%91%E5%A7%8B%E7%BB%88%E7%9B%B8%E4%BF%A1%EF%BC%8C%E5%96%9C%E6%AC%A2%E8%8B%B1%E9%9B%84%E6%95%85%E4%BA%8B%E7%9A%84%E5%AD%A9%E5%AD%90%EF%BC%8C%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%8F%98%E5%9D%8F%E7%9A%84.jpg?raw=true" alt="我始终相信，喜欢英雄故事的孩子，是不会变坏的"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;“我真正想做的，就是告诉你，我感觉很棒！”&lt;br&gt;——斯坦·李&lt;/p&gt;
&lt;p&gt;11月12日，洛杉矶时间周一凌晨，有“漫威爸爸”之称的&lt;strong&gt;斯坦·李&lt;/strong&gt;，又一次被急救车送进了当地的医疗中心。&lt;/p&gt;
&lt;p&gt;不过，这个宇宙还来不及创造出钢铁侠的方舟反应炉</summary>
      
    
    
    
    
  </entry>
  
</feed>
